name: Container Scanning

on:
  push:
    branches: [main]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]
  schedule:
    - cron: "21 5 * * 1"
  workflow_dispatch:

jobs:
  # build:
  #   name: Build Docker image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout the codebase
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # We don't need the whole repo history
  #     - name: Get current date # get the date of the build
  #       id: date
  #       run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"
  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: |
  #           ${{ github.repository_owner }}/fastapi-hello-world
  #           ${{ secrets.GHCR_REGISTRY }}/${{ github.repository_owner }}/fastapi-hello-world
  #           ${{ secrets.ECR_REGISTRY }}/${{ github.repository_owner }}/fastapi-hello-world
  #         tags: |
  #           type=schedule
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=sha

  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: false

  #     # - name: Build and tag
  #     #   run: |
  #     #     docker build -t donhector/fastapi-hello-world:${{ github.sha }} . --build-arg BUILD_DATE=${{ steps.date.outputs.date }}

  #     - name: Save docker image
  #       run: docker save ${{ github.repository_owner }}/fastapi-hello-world -o image.tar

  #     - name: Upload image as artifact # So it can be used by other jobs such as those scanning the image
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: image
  #         path: /tmp/image.tar

  # anchore:
  #   name: Anchore
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Download image artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: image
  #         path: /tmp
  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/image.tar
  #         docker image ls -a
  #     - name: Scan image
  #       uses: anchore/scan-action@v3
  #       id: scan
  #       with:
  #         image: donhector/fastapi-hello-world:${{ github.sha }}
  #         fail-build: true
  #         severity-cutoff: high # supported: negligible, low, medium, high, critical
  #         acs-report-enable: true
  #     - name: upload Anchore scan SARIF report
  #       uses: github/codeql-action/upload-sarif@v1
  #       with:
  #         sarif_file: ${{ steps.scan.outputs.sarif }}

  # trivy:
  #   name: Trivy
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Download image artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: image
  #         path: /tmp
  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/image.tar
  #         docker image ls -a
  #     - name: Scan Image
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: donhector/fastapi-hello-world:${{ github.sha }}
  #         format: template
  #         template: "@/contrib/sarif.tpl"
  #         output: trivy-results.sarif
  #         severity: CRITICAL,HIGH
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v1
  #       with:
  #         sarif_file: trivy-results.sarif

  # snyk:
  #   name: Snyk
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Download image artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: image
  #         path: /tmp

  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/image.tar
  #         docker image ls -a

  #     ## Checkout is required since Snyk needs the Dockerfile for the Sarif report
  #     - name: Checkout the codebase
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - name: Run Snyk to check Docker image for vulnerabilities
  #       uses: snyk/actions/docker@master
  #       with:
  #         image: fastapi-hello-world:${{ github.sha }}
  #         args: --file=Dockerfile --severity-threshold=high
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       continue-on-error: true

  #     - name: Upload result to GitHub Code Scanning
  #       uses: github/codeql-action/upload-sarif@v1
  #       with:
  #         sarif_file: snyk.sarif

  push:
    name: Push Image
    runs-on: ubuntu-latest
    #needs: [anchore, trivy, snyk]
    strategy:
      fail-fast: false
      matrix:
        registry:
          - hostname: 278565630909.dkr.ecr.us-east-1.amazonaws.com
            username: AWS_ACCESS_KEY_ID
            password: AWS_SECRET_ACCESS_KEY
          - hostname: ghcr.io
            username: GHCR_REGISTRY_USERNAME
            password: GHCR_REGISTRY_PASSWORD
          - hostname: index.docker.io
            username: DOCKERHUB_REGISTRY_USERNAME
            password: DOCKERHUB_REGISTRY_PASSWORD
    steps:
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets[matrix.registry.hostname] }}
          username: ${{ secrets[matrix.registry.username] }}
          password: ${{ secrets[matrix.registry.password] }}

      # - name: Download image artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: image
      #     path: /tmp

      # - name: Load Docker image
      #   run: |
      #     docker load --input /tmp/image.tar
      #     docker image ls -a
