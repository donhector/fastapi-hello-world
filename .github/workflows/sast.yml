name: Static Analysis Security Testing

on:
  push:
    branches:
      - main
    paths:
      - app/**
      - tests/**
      - Dockerfile
  pull_request:
    branches:
      - main
    paths:
      - app/**
      - tests/**
      - Dockerfile
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository }} # returns "<owner>/<repo>"

jobs:
  codeql:
    name: Codeql
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: # Supported by CodeQL: go, javascript, csharp, python, cpp, java
          - python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning the specified language(s)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  anchore:
    name: Anchore
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Docker Build
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
      - name: Anchore
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.IMAGE_NAME }}
          fail-build: true
          severity-cutoff: high # supported: negligible, low, medium, high, critical
          acs-report-enable: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  trivy:
    name: Trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Docker Build
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
      - name: Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: sarif
          output: trivy.sarif
          severity: CRITICAL,HIGH
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy.sarif

  snyk:
    name: Snyk
    runs-on: ubuntu-latest
    steps:
      ## Checkout is required since Snyk needs the Dockerfile for the Sarif report
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Docker Build
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
      - name: Snyk
        uses: snyk/actions/docker@master
        with:
          image: ${{ env.IMAGE_NAME }}
          args: --file=Dockerfile --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif

  dockle:
    name: Dockle
    runs-on: ubuntu-latest
    steps:
      # Makes sure your .dockleignore file is available to the next step
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Docker Build
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
      - name: Dockle
        uses: erzz/dockle-action@v1.1.1
        with:
          image: ${{ env.IMAGE_NAME }}
          report-format: sarif
          report-name: dockle
          failure-threshold: warn
          exit-code: 0
          dockle-version: latest
          accept-extensions: pem,log
          accept-filenames: id_rsa,id_dsa
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: dockle.sarif

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Hadolint
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile

  clair-two:
    name: Clair
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker Build
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
      - name: Clair Scan
        uses: Santandersecurityresearch/clair-scan-action@main
        with:
          image: ${{ env.IMAGE_NAME }}
          local: yes
          report_format: json
          report_path: clair.json
          updater: alpine
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: clair.json
          path: clair.json

  # clair:
  #   name: Clair
  #   runs-on: ubuntu-latest
  #   services:
  #     clair-vulnerabilities-db:
  #       image: arminc/clair-db:latest
  #       ports:
  #         - 5432:5432
  #       # needed because the postgres container does not provide a healthcheck
  #       options: --name clair-vulnerabilities-db --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Docker Build
  #       run: |
  #         docker build -t ${{ env.IMAGE_NAME }} .
  #     - name: Clair
  #       run: |
  #         docker run -d --name db arminc/clair-db:latest
  #         docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:latest
  #         DOCKERHOST=$(ifconfig docker0 | grep inet | cut -d' ' -f2)
  #         echo $DOCKERHOST
  #         touch clair-whitelist.yml
  #         ./clair-scanner -c http://$DOCKERHIST:6060 \
  #                         --ip $(hostname -i) \
  #                         -r clair.json \
  #                         -l clair.log \
  #                         -w clair-whitelist.yml \
  #                         --exit-when-no-features=true \
  #                         ${{ env.IMAGE_NAME }}
  #         cat clair.json
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: clair.json
  #         path: clair.json

  push:
    name: Push Image
    runs-on: ubuntu-latest
    needs: [codeql, anchore, trivy, snyk, dockle, hadolint]
    #if: ${{ github.event_name == 'push' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - hostname: 278565630909.dkr.ecr.us-east-1.amazonaws.com
            username: AWS_ACCESS_KEY_ID
            password: AWS_SECRET_ACCESS_KEY
          - hostname: ghcr.io
            username: GHCR_REGISTRY_USERNAME
            password: GHCR_REGISTRY_PASSWORD
          - hostname: index.docker.io
            username: DOCKERHUB_REGISTRY_USERNAME
            password: DOCKERHUB_REGISTRY_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        # with:
        #   driver-opts: image=moby/buildkit:master
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets[matrix.hostname] }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
      - name: Run Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ secrets[matrix.hostname] }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          flavor: |
            latest=auto
      - name: Docker Build-Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            maintainer=${{ github.actor }}
          push: true
