name: Static Analysis Security Testing

on:
  push:
    branches:
      - main
    paths:
      - app/**
      - tests/**
      - Dockerfile
  pull_request:
    branches:
      - main
    paths:
      - app/**
      - tests/**
      - Dockerfile
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository }} # returns "<owner>/<repo>"

jobs:
  codeql:
    name: Codeql
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: # Supported by CodeQL: go, javascript, csharp, python, cpp, java
          - python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      # Initializes the CodeQL tools for scanning the specified language(s)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # We don't need the whole repo history
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Run Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ secrets.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          flavor: |
            latest=true
      - name: Docker Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.authors=${{ github.repository_owner }}
          #load: true
          outputs: type=docker,dest=/tmp/image.tar
          push: false
      - name: Upload image as artifact # So it can be used by other jobs such as those scanning the image
        uses: actions/upload-artifact@v2
        with:
          name: image
          path: /tmp/image.tar
          retention-days: 1

  anchore:
    name: Anchore
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar
      - name: Scan image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.IMAGE_NAME }}
          fail-build: true
          severity-cutoff: high # supported: negligible, low, medium, high, critical
          acs-report-enable: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  trivy:
    name: Trivy
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar
      - name: Scan Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: sarif
          #template: "@/contrib/sarif.tpl"
          output: trivy.sarif
          severity: CRITICAL,HIGH
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy.sarif

  snyk:
    name: Snyk
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      ## Checkout is required since Snyk needs the Dockerfile for the Sarif report
      - name: Checkout the codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download image artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        with:
          image: ${{ env.IMAGE_NAME }}
          args: --file=Dockerfile --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif

  dockle:
    name: Dockle
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      # Makes sure your .dockleignore file is available to the next step
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download image artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar
      - name: Run Dockle
        uses: erzz/dockle-action@v1.1.1
        with:
          image: ${{ env.IMAGE_NAME }}
          report-format: sarif
          report-name: dockle
          failure-threshold: warn
          exit-code: 0
          dockle-version: latest
          accept-extensions: pem,log
          accept-filenames: id_rsa,id_dsa
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: dockle.sarif

  push:
    name: Push Image
    runs-on: ubuntu-latest
    needs: [build, anchore, trivy, snyk, dockle]
    #if: ${{ github.event_name == 'push' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - hostname: ECR_REGISTRY
            username: AWS_ACCESS_KEY_ID
            password: AWS_SECRET_ACCESS_KEY
          - hostname: GHCR_REGISTRY
            username: GHCR_REGISTRY_USERNAME
            password: GHCR_REGISTRY_PASSWORD
          - hostname: DOCKERHUB_REGISTRY
            username: DOCKERHUB_REGISTRY_USERNAME
            password: DOCKERHUB_REGISTRY_PASSWORD
    steps:
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets[matrix.hostname] }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
      - name: Download image artifact
        uses: actions/download-artifact@v2
        with:
          name: image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar
      - name: Push Image
        run: >
          docker push ${{ needs.build.steps.meta.outputs.tags }}
